import random, sys
TOP = 0
LEFT = 0
BOTTOM = 500
RIGHT = 500
class Creature:
    
    def __init__(self, x, y, NNWeights=[[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]]):
        self.NNWeights = NNWeights
        self.x = x
        self.y = y
        self.fitness = 0
    
    def determineDecision(self):
        global TOP, LEFT, BOTTOM, RIGHT
        values = [0, 0, 0, 0]
        greatest = 0
        for i in range(0, 4):
            values[i] = self.NNWeights[i][0] * self.y + self.NNWeights[i][1] * self.x + self.NNWeights[i][2] * BOTTOM-self.y + self.NNWeights[i][3] * RIGHT-self.x
            if i > 0:
                if values[i] > values[i-1]:
                    greatest = i
        if greatest == 0:
            return "up"
        if greatest == 1:
            return "left"
        if greatest == 2:
            return "down"
        if greatest == 3:
            return "right"
        
    def moveSelf(self):
        where = self.determineDecision()
        if where == "up" and self.y > 0:
            self.y -= 1
        if where == "left" and self.x > 0:
            self.x -= 1
        if where == "down" and self.y < BOTTOM + 1:
            self.y += 1
        if where == "right" and self.x < RIGHT + 1:
            self.x += 1
        
    def firstInLineSetup(self):
        for i in range(0, len(self.NNWeights)):
            for j in range(0, len(self.NNWeights[i])):
                self.NNWeights[i][j] = (random.random() * 2) - 1
                
    def mutateSelf(self):
        for i in range(0, len(self.NNWeights)):
            for j in range(0, len(self.NNWeights[i])):
                if random.randint(0, 100) == 0:
                    self.NNWeights[i][j] = (random.random() * 2) - 1
    
    def mitosis(self):
        global RIGHT, BOTTOM
        self.x = RIGHT/2
        self.y = BOTTOM/2
        spawn = []
        for i in range(0, 5):
            spawn.append(Creature(self.x, self.y, self.NNWeights))
            spawn[i].mutateSelf()
        return spawn
        
        
def eliminateTheWeak():
    global allCreatures
    bounds = (250, 0)
    adjustment = 0
    for i in range(0, len(allCreatures)):
        if allCreatures[i-adjustment].x > bounds[0] and allCreatures[i-adjustment].y > bounds[1]:
            del(allCreatures[i-adjustment])
            adjustment += 1
    
def repopulate():
    global allCreatures
    for i in range(0, len(allCreatures)):
        for creature in allCreatures[i].mitosis():
            allCreatures.append(creature)

def initializeFirstGeneration():
    global allCreatures, RIGHT, BOTTOM
    #Second arg in range = initial population size
    for i in range(0, 20):
        allCreatures.append(Creature(
            RIGHT/2, 
            BOTTOM/2, 
            NNWeights=[[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]]
            ))
        allCreatures[i].firstInLineSetup()

def curbOverpopulation(maxPopulation):
    global allCreatures
    maxPopulation -= 1
    adjustment = 0
    for i in range(0, len(allCreatures)):
        if i > maxPopulation:
            del(allCreatures[i-adjustment])
            adjustment += 1


    
allCreatures = []
lastPopulation = []

initializeFirstGeneration()

#Second arg here dictates the number of recursions/generations
for i in range(0, 20):
    #Second arg dictates the number of movements the creatures get
    for j in range(0, 90):
        if len(allCreatures) == 0:
            for creature in lastPopulation:
                #PRINTING NN WEIGHTS
                print("]\n\n[", end=" ")
                for weightsList in creature.NNWeights:
                    for weight in weightsList:
                        print(round(weight, 3), end=",")
                    print("]\n[", end=", ")
                
            sys.exit("Population deceased :(")
        for creature in allCreatures:
            creature.moveSelf()
    
    print("\nGeneration: " + str(i))
    print(len(allCreatures))
    for i in range(0, len(allCreatures)):
        lastPopulation.append(allCreatures[i])
    eliminateTheWeak()
    repopulate()
    curbOverpopulation(100)

print(allCreatures.NNWeights)
